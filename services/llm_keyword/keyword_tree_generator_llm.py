import asyncio
from services.ollama_client import OllamaClient 
from models import KeywordNode, KeywordTreeSummary
from services.llm_keyword.prompt_builder import PromptBuilder 
# =============================
# Keyword Tree Generator
# =============================
class LLMKeywordService:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–≤—É—è–∑—ã—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π OllamaClient."""
    def __init__(self, client: OllamaClient):
        self.client = client

    async def generate(self, text: str, min_depth: int = 4, min_roots: int = 2, max_attempts: int = 3) -> KeywordTreeSummary: 
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        prompt = PromptBuilder.build_dual_lang_prompt(text, min_roots=min_roots, min_depth=min_depth)

        for attempt in range(1, max_attempts + 1):
            print(f'\nüîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt} (Dual-Lang)...')
            resp = await self.client.async_ask(prompt, schema=KeywordTreeSummary) 

            if isinstance(resp, KeywordTreeSummary):
                print('\nüí° –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç KeywordTreeSummary.')
                return resp
            
            print(f'\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç KeywordTreeSummary. –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {resp}')
            await asyncio.sleep(1.0) # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

        raise ValueError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.')

    @staticmethod
    def tree_depth(node: KeywordNode) -> int:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –≥–ª—É–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞ (–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)."""
        if not node.children:
            return 1
        return 1 + max(LLMKeywordService.tree_depth(child) for child in node.children)

    @staticmethod
    def print_trees(summary: KeywordTreeSummary) -> None:
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è –≤ –∫–æ–Ω—Å–æ–ª—å."""
        
        # –ü–µ—á–∞—Ç—å RU
        print('\n--- –î–µ—Ä–µ–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (RU) ---')
        for i, node in enumerate(summary.ru, start=1):
            print(f'Root #{i}: {node.name}')
            LLMKeywordService._print_node(node, 1)

        # –ü–µ—á–∞—Ç—å EN
        print('\n--- –î–µ—Ä–µ–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (EN) ---')
        for i, node in enumerate(summary.en, start=1):
            print(f'Root #{i}: {node.name}')
            LLMKeywordService._print_node(node, 1)


    @staticmethod
    def _print_node(node: KeywordNode, indent: int = 0) -> None:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –ø–µ—á–∞—Ç–∏ —É–∑–ª–æ–≤."""
        print('    ' * indent + f'- {node.name}')
        for child in node.children:
            LLMKeywordService._print_node(child, indent + 1)
